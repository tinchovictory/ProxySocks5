From 23e1f49764f943b378a3cb8d8711f42886513fcf Mon Sep 17 00:00:00 2001
From: "Juan F. Codagnone" <juan@leak.com.ar>
Date: Mon, 14 Aug 2017 22:10:14 -0300
Subject: [PATCH 06/11] Servidor socks5 bloqueante iterativo de prueba

---
 src/main.c   |  83 ++++++++++++++++
 src/socks5.c | 312 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/socks5.h |  10 ++
 3 files changed, 405 insertions(+)
 create mode 100644 src/main.c
 create mode 100644 src/socks5.c
 create mode 100644 src/socks5.h

diff --git a/src/main.c b/src/main.c
new file mode 100644
index 0000000..7605a09
--- /dev/null
+++ b/src/main.c
@@ -0,0 +1,83 @@
+/**
+ * main.c - servidor proxy socks concurrente
+ *
+ * Interpreta los argumentos de línea de comandos, y monta un socket
+ * pasivo. Por cada nueva conexión lanza un hilo que procesará de
+ * forma bloqueante utilizando el protocolo SOCKS5.
+ */
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <limits.h>
+#include <errno.h>
+#include <pthread.h>
+
+#include <sys/socket.h>
+#include <netinet/in.h>
+
+#include <unistd.h>
+
+#include "socks5.h"
+
+int
+main(const int argc, const char **argv) {
+    unsigned port = 1080;
+
+    if(argc == 1) {
+        // utilizamos el default
+    } else if(argc == 2) {
+        char *end     = 0;
+        const long sl = strtol(argv[1], &end, 10);
+
+        if (end == argv[1]|| '\0' != *end 
+           || ((LONG_MIN == sl || LONG_MAX == sl) && ERANGE == errno)
+           || sl < 0 || sl > USHRT_MAX) {
+            fprintf(stderr, "port should be an integer: %s\n", argv[1]);
+            return 1;
+        }
+        port = sl;
+    } else {
+        fprintf(stderr, "Usage: %s <port>\n", argv[0]);
+        return 1;
+    }
+    struct sockaddr_in addr;
+    memset(&addr, 0, sizeof(addr));
+    addr.sin_family      = AF_INET;
+    addr.sin_addr.s_addr = htonl(INADDR_ANY);
+    addr.sin_port        = htons(port);
+
+    const char *err_msg;
+
+    const int server = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
+    if(server < 0) {
+        err_msg = "unable to create socket";
+        goto finally;
+    }
+
+    fprintf(stdout, "Listening on TCP port %d\n", port);
+
+    // man 7 ip. no importa reportar nada si falla.
+    setsockopt(server, SOL_SOCKET, SO_REUSEADDR, &(int){ 1 }, sizeof(int));
+
+    if(bind(server, (struct sockaddr*) &addr, sizeof(addr)) < 0) {
+        err_msg = "unable to bind socket";
+        goto finally;
+    }
+
+    if (listen(server, 20) < 0) {
+        err_msg = "unable to listen";
+        goto finally;
+    }
+
+    int ret = serve_socks5_concurrent_blocking(server);
+
+finally:
+    if(err_msg) {
+        perror(err_msg);
+        ret = 1;
+    }
+    if(server >= 0) {
+        close(server);
+    }
+    return ret;
+}
diff --git a/src/socks5.c b/src/socks5.c
new file mode 100644
index 0000000..dcad744
--- /dev/null
+++ b/src/socks5.c
@@ -0,0 +1,312 @@
+/**
+ * socks5.c -- Implementa de forma bloqueante un proxy SOCKS5
+ */
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <time.h>
+
+#include <unistd.h>
+
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/time.h>
+
+#include <pthread.h>
+
+#include "socks5.h"
+#include "hello.h"
+#include "request.h"
+#include "netutils.h"
+
+#define N(x) (sizeof(x)/sizeof((x)[0]))
+
+/**
+ * Punto de entrada de hilo que copia el contenido de un fd a otro.
+ */
+static void *
+copy_pthread(void *d) {
+  const int *fds = d;
+//  pthread_detach(pthread_self());
+
+  sock_blocking_copy(fds[0], fds[1]);
+  shutdown(fds[0], SHUT_RD);
+  shutdown(fds[1], SHUT_WR);
+
+  return 0;
+}
+
+/** callback del parser utilizado en `read_hello' */
+static void
+on_hello_method(struct hello_parser *p, const uint8_t method) {
+    uint8_t *selected  = p->data;
+
+    if(SOCKS_HELLO_NOAUTHENTICATION_REQUIRED == method) {
+       *selected = method;
+    }
+}
+
+/**
+ * lee e interpreta la trama `hello' que arriba por fd
+ *
+ * @return true ante un error.
+ */
+static bool
+read_hello(const int fd, const uint8_t *method) {
+    // 0. lectura del primer hello
+    uint8_t buff[256 + 1 + 1];
+    buffer buffer; buffer_init(&buffer, N(buff), buff);
+    struct hello_parser hello_parser = {
+        .data                     = (void *)method,
+        .on_authentication_method = on_hello_method,
+    };
+    hello_parser_init(&hello_parser);
+    bool error = false;
+    size_t buffsize;
+    ssize_t n;
+    do {
+        uint8_t *ptr = buffer_write_ptr(&buffer, &buffsize);
+        n = recv(fd, ptr, buffsize, 0);
+        if(n > 0) {
+            buffer_write_adv(&buffer, n);
+            const enum hello_state st = hello_consume(&buffer, &hello_parser, &error);
+            if(hello_is_done(st, &error)) {
+                break;
+            }
+        } else {
+            break;
+        }
+    } while(true);
+
+    if(!hello_is_done(hello_parser.state, &error)) {
+        error = true;
+    }
+    hello_parser_close(&hello_parser);
+    return error;
+}
+
+/**
+ * lee e interpreta la trama `request' que arriba por fd
+ *
+ * @return true ante un error.
+ */
+static bool
+read_request(const int fd, struct request *request) {
+    uint8_t buff[22];
+    buffer  buffer; buffer_init(&buffer, N(buff), buff);
+    size_t  buffsize;
+
+    struct request_parser request_parser = {
+        .request = request,
+    };
+    request_parser_init(&request_parser);
+    unsigned    n = 0;
+       bool error = false;
+
+    do {
+        uint8_t *ptr = buffer_write_ptr(&buffer, &buffsize);
+        n = recv(fd, ptr, buffsize, 0);
+        if(n > 0) {
+            buffer_write_adv(&buffer, n);
+            const enum request_state st = request_consume(&buffer,
+                        &request_parser, &error);
+            if(request_is_done(st, &error)) {
+                break;
+            }
+
+        } else {
+            break;
+        }
+    }while(true);
+    if(!request_is_done(request_parser.state, &error)) {
+        error = true;
+    }
+    request_close(&request_parser);
+    return error;
+}
+
+/** loguea el request a stdout */
+void
+log_request(const enum socks_response_status status,
+            const struct sockaddr* clientaddr,
+            const struct sockaddr* originaddr) {
+    char cbuff[SOCKADDR_TO_HUMAN_MIN * 2 + 2 + 32] = { 0 };
+    unsigned n = N(cbuff);
+    time_t now = 0;
+    time(&now);
+
+    // tendriamos que usar gmtime_r pero no está disponible en C99
+    strftime(cbuff, n, "%FT%TZ\t", gmtime(&now));
+    size_t len = strlen(cbuff);
+    sockaddr_to_human(cbuff + len, N(cbuff) - len, clientaddr);
+    strncat(cbuff, "\t", n-1);
+    cbuff[n-1] = 0;
+    len = strlen(cbuff);
+    sockaddr_to_human(cbuff + len, N(cbuff) - len, originaddr);
+
+    fprintf(stdout, "%s\tstatus=%d\n", cbuff, status);
+}
+
+/**
+ * maneja cada conexión entrante
+ *
+ * @param fd     descriptor de la conexión entrante.
+ * @param caddr  información de la conexiónentrante.
+ */
+static void
+socks5_handle_connection(const int fd, const struct sockaddr *caddr) {
+    uint8_t method = SOCKS_HELLO_NO_ACCEPTABLE_METHODS;
+    struct request request;
+    struct sockaddr *originaddr = 0x00;
+    socklen_t        origin_addr_len = 0;
+    int              origin_domain;
+    int originfd = -1;
+    uint8_t buff[10];
+    buffer b; buffer_init(&(b), N(buff), (buff));
+
+    // 0. lectura del hello enviado por el cliente
+    if(read_hello(fd, &method)) {
+        goto finally;
+    }
+
+    // 1. envio de la respuesta
+    const uint8_t r = (method == SOCKS_HELLO_NO_ACCEPTABLE_METHODS)
+                    ? 0xFF : 0x00;
+    hello_marshall(&b, r);
+    if(sock_blocking_write(fd, &b)) {
+        goto finally;
+    }
+    if(SOCKS_HELLO_NO_ACCEPTABLE_METHODS == method) {
+        goto finally;
+    }
+
+    // 2. lectura del request
+    enum socks_response_status status = status_general_SOCKS_server_failure;
+    if(read_request(fd, &request)) {
+        status = status_general_SOCKS_server_failure;
+    } else {
+        // 3. procesamiento
+        switch (request.cmd) {
+            case socks_req_cmd_connect: {
+                bool error = false;
+                status = cmd_resolve(&request, &originaddr, &origin_addr_len,
+                                     &origin_domain);
+                if(originaddr == NULL) {
+                    error = true;
+                } else {
+                    originfd = socket(origin_domain, SOCK_STREAM, 0);
+                    if(originfd == -1) {
+                        error = true;
+                    } else {
+                        if(-1 == connect(originfd, originaddr, origin_addr_len)) {
+                            status = errno_to_socks(errno);
+                            error  = true;
+                        } else {
+                            status = status_succeeded;
+                        }
+                    }
+                }
+                if(error) {
+                    if(originfd != -1) {
+                        close(originfd);
+                        originfd = -1;
+                    }
+                    close(fd);
+                }
+                break;
+            } case socks_req_cmd_bind:
+            case socks_req_cmd_associate:
+            default:
+                status = status_command_not_supported;
+                break;
+        }
+    }
+    log_request(status, caddr, originaddr);
+
+    // 4. envio de respuesta al request.
+    request_marshall(&b, status);
+    if(sock_blocking_write(fd, &b)) {
+        goto finally;
+    }
+
+    if(originfd == -1) {
+        goto finally;
+    }
+
+    // 5. copia dos vías
+    pthread_t tid;
+    int fds[2][2]= {
+        {originfd, fd      },
+        {fd,       originfd},
+    };
+
+    if(pthread_create(&tid, NULL, copy_pthread, fds[0])) {
+        goto finally;
+    }
+    sock_blocking_copy(fds[1][0], fds[1][1]);
+    pthread_join (tid, 0);
+
+    finally:
+        if(originfd != -1) {
+            close(originfd);
+        }
+        close(fd);
+}
+
+/**
+ * estructura utilizada para transportar datos entre el hilo
+ * que acepta sockets y los hilos que procesa cada conexión
+ */
+struct connection {
+    int fd;
+    socklen_t addrlen;
+    struct sockaddr_in6 addr;
+};
+
+/** rutina de cada hilo worker */
+static void *
+handle_connection_pthread(void *args) {
+    const struct connection *c = args;
+    pthread_detach(pthread_self());
+
+    socks5_handle_connection(c->fd, (struct sockaddr *)&c->addr);
+    free(args);
+
+    return 0;
+}
+
+/**
+ * atiende a los clientes de forma concurrente con I/O bloqueante.
+ */
+extern int
+serve_socks5_concurrent_blocking(const int server) {
+    for (;;) {
+        struct sockaddr_in6 caddr;
+        socklen_t caddrlen = sizeof (caddr);
+        // Wait for a client to connect
+        const int client = accept(server, (struct sockaddr*)&caddr, &caddrlen);
+        if (client < 0) {
+            perror("unable to accept incoming socket");
+        } else {
+            // TODO(juan): limitar la cantidad de hilos concurrentes
+            struct connection* c = malloc(sizeof (struct connection));
+            if (c == NULL) {
+                // lo trabajamos iterativamente
+                socks5_handle_connection(client, (struct sockaddr*)&caddr);
+            } else {
+                pthread_t tid;
+                c->fd = client;
+                c->addrlen = caddrlen;
+                memcpy(&(c->addr), &caddr, caddrlen);
+                if (pthread_create(&tid, 0, handle_connection_pthread, c)) {
+                    free(c);
+                    // lo trabajamos iterativamente
+                    socks5_handle_connection(client, (struct sockaddr*)&caddr);
+                }
+            }
+        }
+    }
+    return 0;
+}
+
diff --git a/src/socks5.h b/src/socks5.h
new file mode 100644
index 0000000..f9fbdb3
--- /dev/null
+++ b/src/socks5.h
@@ -0,0 +1,10 @@
+#ifndef SOCKS5_H_Fu0Ql4AzVLP2XUy2Y3qaQs2dnxo
+#define SOCKS5_H_Fu0Ql4AzVLP2XUy2Y3qaQs2dnxo
+
+/**
+ * Servidor bloqueante y concurrente socks
+ */
+int
+serve_socks5_concurrent_blocking(const int server);
+
+#endif
-- 
2.14.3

